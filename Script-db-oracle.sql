/**descomentar si se borraran tablas para pruebas**/

DROP TABLE oina_usuario;
DROP TABLE oina_autor;
DROP TABLE oina_categoria;
DROP TABLE oina_libro;
DROP TABLE oina_prestamo;
DROP TABLE oina_logs;


--creación de la tabla usuario
CREATE TABLE oina_usuario(
    nombre VARCHAR2(15 BYTE) NOT NULL,
    clave VARCHAR2(256 BYTE) NOT NULL,
    tipo_usuario NUMBER(1) NOT NULL /*0=usuario,1=admin"*/,
    CONSTRAINT pk_usuario PRIMARY KEY(nombre)
);

--creación de la tabla autor
CREATE TABLE oina_autor(
    id_autor NUMBER GENERATED by default on null as IDENTITY (START WITH 1 INCREMENT BY 1), 
    nombre VARCHAR2(50 BYTE) NOT NULL, 
    CONSTRAINT pk_autor PRIMARY KEY(id_autor)
);

--creacion de la tabla categoria
CREATE TABLE oina_categoria(
    id_categoria NUMBER GENERATED by default on null as IDENTITY(START WITH 1 INCREMENT BY 1),
    nombre VARCHAR2(50 BYTE) NOT NULL,
    CONSTRAINT pk_categoria PRIMARY KEY (id_categoria)
);

--creación de la tabla libro
CREATE TABLE oina_libro(
    id_libro VARCHAR2(10 BYTE) NOT NULL,
    nombre VARCHAR2(50 BYTE) NOT NULL, 
    cantidad NUMBER(9) NOT NULL,
    precio NUMBER(9,2) NOT NULL,
    precio_euros NUMBER(9,2) NULL,
    estado NUMBER NOT NULL /* 0=No disponible, 1= disponible*/,
    id_autor NUMBER (9),
    id_categoria NUMBER(9), 
    CONSTRAINT pk_libro PRIMARY KEY (id_libro)
);

--creacion de tabla prestamo
CREATE TABLE oina_prestamo(
    id_usuario VARCHAR2(15 BYTE) NOT NULL, 
    fecha_prestamo DATE NOT NULL,
    fecha_devolucion_estimada DATE NOT NULL,
    fecha_devolucion_real DATE NULL,
    id_libro VARCHAR2(10 BYTE)
);

--creación de la tabla log
CREATE TABLE oina_logs(
    id NUMBER GENERATED by default on null as IDENTITY(START WITH 1 INCREMENT BY 1), 
    accion VARCHAR2(300 BYTE),
    fecha DATE, 
    usuario VARCHAR2(15 BYTE)
);

--creación de la tabla datos
CREATE TABLE oina_datos(
    id_datos NUMBER GENERATED by default on null as IDENTITY(START WITH 1 INCREMENT BY 1), 
    nombre VARCHAR2(300 BYTE),
    valor VARCHAR2(300 BYTE)
);

/**alters**/

ALTER TABLE oina_libro ADD CONSTRAINT fk_libro_autor FOREIGN KEY (id_autor) REFERENCES
oina_autor (id_autor);

ALTER TABLE oina_libro ADD CONSTRAINT fk_libro_categoria FOREIGN KEY (id_categoria) 
REFERENCES oina_categoria(id_categoria);

ALTER TABLE oina_prestamo ADD
CONSTRAINT fk_prestamo_usuario 
FOREIGN KEY (id_usuario) REFERENCES oina_usuario(nombre);

ALTER TABLE oina_prestamo ADD
CONSTRAINT fk_prestamo_libro FOREIGN KEY (id_libro)
REFERENCES oina_libro(id_libro);

/**inserts**/
insert into oina_usuario values('admin', 'NFZDYXgzUTMvdnBkbnF6QWVtd1hRdz09OjoAAAAAAAAAAAAAAAAAAAAAOjokMmEkMTAkbA==', 1);

insert into oina_datos values(null,'precio en euros',null);
insert into oina_datos values(null,'precio en dolares',null);

insert into oina_autor values(null,'Platón');
insert into oina_autor values(null,'Shakespeare');

insert into oina_categoria values(null, 'Filosofía');
insert into oina_categoria values(null, 'Tragedia');

insert into oina_libro values('F-001','La República - Tomo 1',1,60.58, 0.00,1,1,1);
insert into oina_libro values('T-001','Hamlet',1,89.26, 12.3, 1,2,2);
commit;


/*Procedimiento cambiar a estado inactivo una categoria completa de libro (para dar mantenimiento)*/

CREATE OR REPLACE PROCEDURE oina_proc_mant_cat (id_cat IN NUMBER) AS
CURSOR c_lib IS SELECT id_libro FROM oina_libro WHERE id_categoria=id_cat;  
idlib VARCHAR2(10 BYTE);
BEGIN
    FOR v_lib IN c_lib LOOP
    idlib := v_lib.id_libro;
    UPDATE oina_libro SET estado = 0 WHERE id_libro = idlib;
    END LOOP;
END;

/*Procedimiento para revisar libro por libro, 
para cambiar su estado a no disponible si ya no hay 
en existencia en la biblioteca*/

CREATE OR REPLACE PROCEDURE oina_proc_check_disp IS
CURSOR c_estado IS SELECT id_libro, cantidad FROM oina_libro;
cant NUMBER;
id_lib VARCHAR2(10 BYTE);
BEGIN
    FOR v_estado IN c_estado LOOP
    id_lib := v_estado.id_libro;
    cant := v_estado.cantidad;
    IF cant < 1 THEN
        UPDATE oina_libro SET estado = 0 WHERE id_libro = id_lib;
    END IF;
    END LOOP;
END;
 
/*TRIGGER PARA INVOCARLO*/

CREATE OR REPLACE TRIGGER oina_trigg_check_dispo AFTER INSERT ON oina_prestamo
BEGIN
    oina_proc_check_disp();
END;


--procedimeintos usando transacciones

--este se encarga de actualziar los prescios de los libros en auros segun vaya cambiando de vlaor
create or replace procedure oina_proc_actualizarPrecioEuros (nuevoValorEuro in number) 
as
valor_total VARCHAR2(15);
begin
    
    update oina_libro set precio_euros = (precio * nuevoValorEuro);
    
    select sum(precio) into valor_total from oina_libro;
    
    update oina_datos set valor = valor_total where id_datos = 1;
    
    select sum(precio_euros) into valor_total from oina_libro;
    
    update oina_datos set valor = valor_total where id_datos = 2;

    COMMIT;
exception
    WHEN OTHERS THEN
    dbms_output.put_line('Error en la transaccion:' || SQLERRM);
    dbms_output.put_line('Se deshacen las modificaciones');
    ROLLBACK;
end;


--este se encarga de crear nuevos usarios revisando que este no exista en la base de datos
create or replace procedure oina_proc_crearNuevoUsuario(username in VARCHAR2, password in VARCHAR2, user_type in number, user_thats_create in varchar2) 
as
total number(10);
begin
    select count(*) into total from oina_usuario where oina_usuario.nombre = username;
    
    if total > 0 then
        raise_application_error( -20001, 'el usuario ya existe en la base de datos');
        dbms_output.put_line('el usuario ya existe en la base de datos');
    else
        insert into oina_usuario values(username, password, user_type);
        
        insert into oina_logs values(null, 'usuario nuevo creado', SYSDATE, user_thats_create);
    end if;
    
    COMMIT;
exception
    WHEN OTHERS THEN
    dbms_output.put_line('Error en la transaccion:' || SQLERRM);
    dbms_output.put_line('Se deshacen las modificaciones');
    ROLLBACK;
end;

set serveroutput on;