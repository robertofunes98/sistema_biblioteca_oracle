/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formularios;

import core.ConexionDB;
import core.Variables;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.DefaultJasperReportsContext;
import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperReportsContext;
import net.sf.jasperreports.engine.design.JRCompiler;
import net.sf.jasperreports.engine.design.JRJdtCompiler;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.export.ooxml.JRXlsxExporter;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.export.SimpleExporterInput;
import net.sf.jasperreports.export.SimpleOutputStreamExporterOutput;
import net.sf.jasperreports.export.SimplePdfExporterConfiguration;
import net.sf.jasperreports.export.SimpleXlsxExporterConfiguration;

/**
 *
 * @author FA
 */
public class ImprimirReporteDialog extends javax.swing.JDialog {

    /**
     * Creates new form ModificarAutorDialog
     */
    String idAutor;
    ConexionDB conexion;
    
    public ImprimirReporteDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        this.setResizable(false);
        
        try{
            conexion=new ConexionDB(Variables.rutaDB, Variables.userDB, Variables.claveDB);
        }
        catch(ClassNotFoundException | IllegalAccessException | InstantiationException | SQLException e)
        {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        cbColumnas = new javax.swing.JComboBox<>();
        cbOrden = new javax.swing.JComboBox<>();
        chbIncluirPrecio = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnImprimir = new javax.swing.JButton();
        btnImprimir1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(1, 64, 46));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        jLabel3.setText("Ordenado por:");

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/print_32_32.png"))); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addGap(29, 29, 29)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel15.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Imprimir reporte");

        cbColumnas.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        cbColumnas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Seleccione uno--", "Código", "Nombre", "Cantidad", "Autor", "Categoria", "Precio" }));

        cbOrden.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        cbOrden.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Seleccione uno--", "Ascencente", "Descendente" }));

        chbIncluirPrecio.setFont(new java.awt.Font("Century Gothic", 0, 10)); // NOI18N
        chbIncluirPrecio.setText("¿Incluir precio?");
        chbIncluirPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbIncluirPrecioActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Columna");

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Orden");

        btnImprimir.setBackground(new java.awt.Color(233, 242, 241));
        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/print_32_32.png"))); // NOI18N
        btnImprimir.setText("Imprimir EXCEL");
        btnImprimir.setBorder(null);
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnImprimir1.setBackground(new java.awt.Color(233, 242, 241));
        btnImprimir1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/print_32_32.png"))); // NOI18N
        btnImprimir1.setText("Imprimir PDF");
        btnImprimir1.setBorder(null);
        btnImprimir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimir1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(chbIncluirPrecio)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbColumnas, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(cbOrden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnImprimir1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(166, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel15)
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbColumnas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbOrden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(chbIncluirPrecio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImprimir1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        // TODO add your handling code here
        imprimir("excel");
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void chbIncluirPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbIncluirPrecioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chbIncluirPrecioActionPerformed

    private void btnImprimir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimir1ActionPerformed
        // TODO add your handling code here:
        imprimir("pdf");
    }//GEN-LAST:event_btnImprimir1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnImprimir1;
    private javax.swing.JComboBox<String> cbColumnas;
    private javax.swing.JComboBox<String> cbOrden;
    private javax.swing.JCheckBox chbIncluirPrecio;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables

    private void imprimir(String formato) {
        if(cbColumnas.getSelectedIndex()==0)
            JOptionPane.showMessageDialog(rootPane, "Por favor seleccione una columna para ordenar","Error",JOptionPane.ERROR_MESSAGE);
        else if(cbOrden.getSelectedIndex()==0)
            JOptionPane.showMessageDialog(rootPane, "Por favor seleccione orden ascendente o descendente","Error",JOptionPane.ERROR_MESSAGE);
        else
        {
            final String URL, ORDER_BY, ORDENAMIENTO_ASC_DESC,INICIO_URL="src";
            
            if(chbIncluirPrecio.isSelected())
                URL = INICIO_URL+"\\reportes\\reporte_libros_con_precio.jrxml";
            else
                URL = INICIO_URL+"\\reportes\\reporte_libros_sin_precio.jrxml";
            
            switch(cbColumnas.getSelectedIndex())
            {
                case 1:
                    ORDER_BY="libro.id_libro";
                    break;
                case 2:
                    ORDER_BY="libro.nombre";
                    break;
                case 3:
                    ORDER_BY="libro.cantidad";
                    break;
                case 4:
                    ORDER_BY="autor.nombre";
                    break;
                case 5:
                    ORDER_BY="categoria.nombre";
                    break;
                case 6:
                    ORDER_BY="libro.precio";
                    break;
                default:
                    ORDER_BY=" ";
                    break;
            }

            if(cbOrden.getSelectedIndex()==1)
                ORDENAMIENTO_ASC_DESC="ASC";
            else
                ORDENAMIENTO_ASC_DESC="DESC";
            
            //Generando reporte
            try {
                //Crear el mapa de parametros
                Map<String,Object> parameters = new HashMap<>();

                parameters.put("logo_na",INICIO_URL+"\\reportes\\");

                parameters.put("sentenciaPrincipal","SELECT libro.id_libro, libro.nombre, libro.cantidad, autor.nombre as 'Autor', categoria.nombre as 'Categoria', "
                        + "CONCAT('$',libro.precio)  as 'Precio', CONCAT('$',libro.precio * libro.cantidad) as 'Precio total' FROM libro inner join autor ON autor.id_autor = libro.id_autor inner join categoria ON  "
                        + "categoria.id_categoria = libro.id_categoria ORDER BY "+ORDER_BY+" "+ORDENAMIENTO_ASC_DESC);
                
                        
                parameters.put(JRParameter.IS_IGNORE_PAGINATION, !formato.equals("pdf"));

                //Genrando JasperPrint para generar reporte
                InputStream reportStream = new FileInputStream(URL);

                //Iniciar reporte
                
                File xml = new File(URL);
                JasperDesign jasperDesign = JRXmlLoader.load(xml);
                
                //MyClassLoader cl = MyClassLoader.getInstance();
                
                 JasperReportsContext jrc = DefaultJasperReportsContext.getInstance();
                
                
                JRCompiler compiler = new JRJdtCompiler(jrc);
                //Thread.currentThread().setContextClassLoader(cl);
                
                JasperReport jasperReport = compiler.compileReport(jasperDesign);
                
                //Llenar el reporte donde se le pasa en el tercer argumento el mapa ya creado
                JasperFillManager.fillReportToFile(jasperReport, INICIO_URL+"/reportes/reporte.jrprint", (Map<String,Object>)parameters,conexion.conexion);

                reportStream.close();

                JasperPrint jasperPrint=(JasperPrint)JRLoader.loadObjectFromFile(INICIO_URL+"/reportes/reporte.jrprint");
                
                
                /*JasperReport report = JasperCompileManager.compileReportToFile(URL);
                
                
                JasperPrint jasperPrint = new JasperPrint();

                //Llenar el reporte donde se le pasa en el tercer argumento el mapa ya creado
                JasperFillManager.fillReportToFile(INICIO_URL+"\\reportes\\reporte_libros.jasper",INICIO_URL+"\\reportes\\reporte_libros.jrprint", (Map<String,Object>)parameters,conexion.conexion);

                
                //JasperPrintManager.printReport("src\\reportes\\reporte_libros.jrprint", false);
                
                
                reportStream.close();

                jasperPrint=(JasperPrint)JRLoader.loadObjectFromFile(INICIO_URL+"\\reportes\\reporte_libros.jrprint");*/
                
                if(formato.equals("pdf"))
                {
                    JRPdfExporter exp = new JRPdfExporter();

                    exp.setExporterInput(new SimpleExporterInput(jasperPrint));
                    
                    File archivoElegido=new File("");
                    JFileChooser fc = new JFileChooser();
                    //Mostrar la ventana para abrir archivo y recoger la respuesta
                    //En el parámetro del showOpenDialog se indica la ventana
                    //  al que estará asociado. Con el valor this se asocia a la
                    //  ventana que la abre.
                    int respuesta = fc.showOpenDialog(this);
                    //Comprobar si se ha pulsado Aceptar
                    if (respuesta == JFileChooser.APPROVE_OPTION) {
                        //Crear un objeto File con el archivo elegido
                        archivoElegido = fc.getSelectedFile();
                    }

                    exp.setExporterOutput(new SimpleOutputStreamExporterOutput(archivoElegido.getAbsolutePath()+".pdf"));

                    SimplePdfExporterConfiguration conf = new SimplePdfExporterConfiguration();

                    exp.setConfiguration(conf);

                    exp.exportReport();

                    JOptionPane.showMessageDialog(rootPane, "El reporte fue impreso en "+archivoElegido.getAbsolutePath()+".pdf");
                }
                else if(formato.equals("excel"))
                {
                    //generar xlsx
                    JRXlsxExporter exp= new JRXlsxExporter();

                    exp.setExporterInput(new SimpleExporterInput(jasperPrint));

                    File archivoElegido=new File("");
                    JFileChooser fc = new JFileChooser();
                    //Mostrar la ventana para abrir archivo y recoger la respuesta
                    //En el parámetro del showOpenDialog se indica la ventana
                    //  al que estará asociado. Con el valor this se asocia a la
                    //  ventana que la abre.
                    int respuesta = fc.showOpenDialog(this);
                    //Comprobar si se ha pulsado Aceptar
                    if (respuesta == JFileChooser.APPROVE_OPTION) {
                        //Crear un objeto File con el archivo elegido
                        archivoElegido = fc.getSelectedFile();
                    }

                    exp.setExporterOutput(new SimpleOutputStreamExporterOutput(archivoElegido.getAbsolutePath()+".xlsx"));

                    SimpleXlsxExporterConfiguration conf = new SimpleXlsxExporterConfiguration();

                    exp.setConfiguration(conf);

                    exp.exportReport();

                    JOptionPane.showMessageDialog(rootPane, "El reporte fue impreso en "+archivoElegido.getAbsolutePath()+".xlsx");
                }
            }
            catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, e.toString());
            }
        }
    }
}
